name: Build Node project
author: 'MiLaboratories'
description: |
  Prepare agent for building a Node project.
  Install Node specific version, download package, create cache e.t.c

inputs:
  app-name:
    description: |
      Application name in human-readable form.
      As it is supposed to be shown in texts
    type: string
    required: false
    default: ${{ github.repository }}
  app-name-slug:
    description: |
      Application name slug (part of release file name)
    type: string
    required: true

  build-version:
    description: |
       Set version number in 'package.json' file to given value.
    type: string
    required: false
  electron-config-args:
    description: |
      The path to an electron-builder config.
      Defaults to 'electron-builder.yml' (or 'json', or 'json5')
    type: string
    required: false
    default: '.electron-builder.config.js'
  electron-build-args:
    description: |
      List of additional build arguments.
      One argument per line:
      '--x64'
      '--arm64'
    type: string
    required: false
    default: ''
  is-vue-project:
    description: |
      This is vue-based project. Use 'vue-cli' toolkit
    type: boolean
    required: false
    default: false
  is-release:
    description: |
      Set If you would like to mark the current version as a release version.
    type: boolean
    required: false
    default: false

  mac_sign_cert:
    description: |
      base64-encoded p12 certificate file for the macOS
    required: false

  mac_sign_cert_pwd:
    description: |
      password to decrypt the p12 signing certificate for the macOS
    required: false

  win_sign_cert:
    description: |
      base64-encoded p12 certificate file for the Windows
    required: false

  win_sign_cert_pwd:
    description: |
      password to decrypt the p12 signing certificate for the Windows
    required: false

  node-version:
    description: |
      Node version to use.
      Examples: '16.x', '14.x'
    required: true

  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.

    required: false
    default: 'v1'

runs:
  using: "composite"

  steps:
    - id: context
      uses: milaboratory/github-ci/actions/context@v2

    - name: Prepare env for Node application build
      uses: milaboratory/github-ci/actions/node/prepare@v2
      with:
        node-version: ${{ inputs.node-version }}
        cache-version: ${{ inputs.cache-version }}

    - name: Install node packages with npm
      uses: milaboratory/github-ci/actions/shell@v2
      with:
        run: |
         npm ci

    - name: Patch package version
      uses: milaboratory/github-ci/actions/node/patch-version@v2
      with:
        version: ${{ steps.context.outputs.current-version }}

    - name: Run build script
      uses: milaboratory/github-ci/actions/shell@v2
      env:
        BUILD_SCRIPT: ${{ inputs.build-script-name }}
      with:
        run: |
          npm run "${BUILD_SCRIPT}" --if-present

    - name: Set env variables for signing the application
      uses: milaboratory/github-ci/actions/shell@v2
      with:
        dump-stdout: false
        run: |
          if [ "${RUNNER_OS}" = "macOS" ] && [ ! -z "${{ inputs.mac_sign_cert }}" ]; then
            ghwa_set_env "CSC_LINK" "${{ inputs.mac_sign_cert }}"
            ghwa_set_env "CSC_KEY_PASSWORD" "${{ inputs.mac_sign_cert_pwd }}"
          elif [ "${RUNNER_OS}" = "Windows" ] && [ ! -z "${{ inputs.win_sign_cert }}" ]; then
            ghwa_set_env "CSC_LINK" "${{ inputs.win_sign_cert }}"
            ghwa_set_env "CSC_KEY_PASSWORD" "${{ inputs.win_sign_cert_pwd }}"
          else
            printf "No certificate for the: %s." "${RUNNER_OS}"
          fi

    - name: Build Electron application
      uses: milaboratory/github-ci/actions/shell@v2
      env:
        VITE_APP_VERSION: ${{ steps.context.outputs.current-version }}
        IS_VUE_PROJECT: ${{ inputs.is-vue-project }}
        IS_RELEASE: ${{ inputs.is-release }}
        ELECTRON_CONFIG_ARGS: ${{ inputs.electron-config-args }}
        ELECTRON_BUILD_ARGS: ${{ inputs.electron-build-args }}
      with:
        dump-stdout: false
        run: |
          if [ "${IS_VUE_PROJECT}" = "true" ]; then
            ELECTRON_CMD="vue-cli-service electron:build"
          else
            ELECTRON_CMD="electron-builder"
          fi

          if [ "${RUNNER_OS}" = "macOS" ]; then
            ELECTRON_BUILD_PLATFORM="--mac"
          elif [ "${RUNNER_OS}" = "Windows" ]; then
            ELECTRON_BUILD_PLATFORM="--windows"
          else
            ELECTRON_BUILD_PLATFORM="--linux"
          fi

          if [ "${IS_RELEASE}" = "true" ]; then
            ELECTRON_PUBLISH_RELEASE="--publish always"
          else
            ELECTRON_PUBLISH_RELEASE=""
          fi

          cmd_bin=("${ELECTRON_CMD}")

          calculated_args=()
          for _c_arg in "${ELECTRON_BUILD_PLATFORM}" "${ELECTRON_PUBLISH_RELEASE}"; do
            if [ -n "${_c_arg}" ];then
              calculated_args+=( "${_c_arg}" )
            fi
          done

          config_args=()
          while read -r _arg; do
            if [ -n "${_arg}" ]; then
              config_args+=( --config "${_arg}" )
            fi
          done <<<"${ELECTRON_CONFIG_ARGS}"

          build_args=()
          while read -r _b_arg; do
            if [ -n "${_b_arg}" ]; then
              build_args+=( "${_b_arg}" )
            fi
          done <<<"${ELECTRON_BUILD_ARGS}"

          npx --no-install \
            "${cmd_bin[@]}" \
            "${calculated_args[@]}" \
            "${config_args[@]}" \
            "${build_args[@]}"

    - name: Set output variables for the application name
      uses: milaboratory/github-ci/actions/shell@v2
      env:
         APP_NAME_SLUG: ${{ inputs.app-name-slug }}
      with:
        dump-stdout: false
        run: |
          if [ "${RUNNER_OS}" = "Linux" ]; then
            ghwa_set_output "name" "${APP_NAME_SLUG}-linux"
            ghwa_set_output "path" "dist/*.AppImage"
          elif [ "${RUNNER_OS}" = "macOS" ]; then
            ghwa_set_output "name" "${APP_NAME_SLUG}-mac"
            ghwa_set_output "path" "dist/*.dmg"
          else
            ghwa_set_output "name" ""
            ghwa_set_output "path" ""
          fi
