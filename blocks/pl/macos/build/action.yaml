name: Run build the Platform on MacOS
author: 'MiLaboratories'
description: |
  Build the Platform

  Prepare agent for building the Platform on MacOS.
  Install Golang specific version, cache dependencies, re-use build results

inputs:
  build-command:
    description: |
      Build command (initiate build for the platform)
    required: false
    default: 'go build .'
  bootstrap-ci-script-name:
    description: |
      Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc)
    required: true
    default: 'bootstrap-ci.sh'
  golang-version:
    description: |
      Golang version to use.
      Examples: '1.19', '1.20'
    required: true
  cache-version:
    description: |
      Simple hack, that allows to 'reset' cache for particular job.

      Just change the value of this parameter and the next run will
      not find build cache and will have to start from scratch.

    required: false
    default: 'v1'
  github-token:
    description: |
      Github token to authorize git operation in the same repository as the workflow.
    required: true

runs:
  using: "composite"

  steps:
    - name: Prepare environment for building a golang application
      uses:  milaboratory/github-ci/actions/golang/prepare@v4-beta
      with:
        golang-version: ${{ inputs.golang-version }}
        cache-version: ${{ inputs.cache-version }}

    - uses: milaboratory/github-ci/actions/git/auth@v4-beta
      with:
        github-token: ${{ inputs.github-token }}

    - name: run boostrap ci script
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        CI_SCRIPT: ${{ inputs.bootstrap-ci-script-name }}
      with:
        run: |
          if [ -x "${CI_SCRIPT}" ];then
            "./${CI_SCRIPT}"
          else
            printf "File: %s doesn't exist or it's not executable." "${CI_SCRIPT}"
            exit 1
          fi

    - name: run build command for the platform
      uses: milaboratory/github-ci/actions/shell@v4-beta
      env:
        BUILD_CMD: ${{ inputs.build-command }}
      with:
        dump-stdout: false
        run: |
          cd platform/cmd/pl
          bash -c "${BUILD_CMD}"

    - name: run bundle dylibs
      uses: milaboratory/github-ci/actions/shell@v4-beta
      with:
        dump-stdout: false
        run : |
          cd platform/cmd/pl
          dylibbundler \
            --bundle-deps \
            --create-dir \
            --dest-dir ./libs \
            --install-path '@executable_path/libs/' \
            --fix-file pl

    - uses: actions/upload-artifact@v3
      with:
        name: pl-bin-macos-amd64
        path: './platform/cmd/pl'
