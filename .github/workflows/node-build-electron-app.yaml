# This workflow will do a clean prepare of node dependencies,
# cache/restore them, build the source code and run tests across different OS

name: Build Electron Application

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in texts
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Version detection control
      #
      version-fetch-depth:
        description: |
          Fetch at least N commits during version detection from tags
        type: string
        required: false
        default: 100
      version-canonize:
        description: |
          Canonize version number to make it always look like regular semver: <major>.<minor>.<bugfix>
        type: boolean
        required: false
        default: true

      #
      # Environment control
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true
      os:
        description: |
          OS to build for.
          Examples: ubuntu-latest, macos-latest, windows-latest

          Check labels of GitHub-hosted runners for more info:
          https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#github-hosted-runners
        type: string
        required: true

      #
      # Build control
      #
      artifacts-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7
      build-script-name:
        description: |
          Name of script for application build
        type: string
        required: false
        default: 'electron:build'
      vue-project:
        description: |
          This is vue-based project. Use 'vue-cli' toolkit
        type: boolean
        required: false
        default: true

      #
      # Release control
      #
      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

    secrets:
      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

jobs:
  versions:
    name: Versions Detection
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - id: versions
        uses: milaboratory/github-ci/actions/detect-version@v1
        with:
          canonize: ${{ inputs.version-canonize }}
          fetch-depth: ${{ inputs.version-fetch-depth }}

    outputs:
      current-version: ${{ steps.versions.outputs.current-version }}
      current-tag: ${{ steps.versions.outputs.current-tag }}
      current-sha: ${{ steps.versions.outputs.current-sha }}

      previous-version: ${{ steps.versions.outputs.previous-version }}
      previous-tag: ${{ steps.versions.outputs.previous-tag }}
      previous-sha: ${{ steps.versions.outputs.previous-sha }}

      latest-version: ${{ steps.versions.outputs.latest-version }}
      latest-tag: ${{ steps.versions.outputs.latest-tag }}
      latest-sha: ${{ steps.versions.outputs.latest-sha }}

  build:
    strategy:
      matrix:
        os: ${{ fromJSON( inputs.os ) }}

    runs-on: ${{ matrix.os }}

    needs:
      - versions

    steps:
      - uses: actions/checkout@v2

      - name: Prepare env for Node application build
        uses: milaboratory/github-ci/actions/node/prepare@v1
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: 'v1'

      - name: Install node packages with npm
        run: npm install
        shell: bash

      - name: Patch package version
        uses: milaboratory/github-ci/actions/node/patch-version@v1
        with:
          version: ${{ needs.versions.outputs.current-version }}

      - name: Build application
        run: |
          npm run ${{ inputs.build-script-name }}

      - name: Save artifact with Mac OS X application
        uses: actions/upload-artifact@v2
        if: runner.os == 'macOS'
        with:
          name: ${{ inputs.app-name-slug }}-mac
          path: dist_electron/*.dmg
          retention-days: ${{ inputs.artifacts-retention }}

      - name: Save artifact with Linux application
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: ${{ inputs.app-name-slug }}-linux
          path: dist_electron/*.AppImage
          retention-days: ${{ inputs.artifacts-retention }}

      #
      # Release-only steps
      #
      - name: Create release
        id: create-release
        if: startsWith( needs.versions.outputs.current-tag, 'v')
        uses: milaboratory/github-ci/actions/release/create@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ needs.versions.outputs.current-version }}
          tag: ${{ needs.versions.outputs.current-tag }}

          assets: |
            dist_electron/*.dmg,
            dist_electron/*.AppImage

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-url: ${{ steps.create-release.outputs.html_url }}

  notify-telegram:
    runs-on: ubuntu-latest

    if: inputs.notify-telegram

    needs:
      - versions
      - build

    steps:
      - name: Report dev build is ready
        if: needs.build.outputs.release-id == ''
        uses: milaboratory/github-ci/actions/notify/templates/dev-build-ready@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.app-name }}
          build-version: ${{ needs.versions.outputs.current-version }}
          build-category: dev

      - name: Report release is ready
        if: needs.build.outputs.release-id != ''
        uses: milaboratory/github-ci/actions/notify/templates/release-ready@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.app-name }}
          release-tag: ${{ needs.versions.outputs.current-tag }}
