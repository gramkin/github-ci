# This workflow will prepare given version of Java and use it
# to build gradle application. All gradle dependencies will be cached for next runs.

name: Build Java Application

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Version detection control
      #
      version-fetch-depth:
        description: |
          Fetch at least N commits during version detection from tags
        type: string
        required: false
        default: 100
      version-canonize:
        description: |
          Canonize version number to make it always look like regular semver: <major>.<minor>.<bugfix>
        type: boolean
        required: false
        default: true

      #
      # Environment control
      #
      java-version:
        description: |
          Version of JAVA to use for build
        type: string
        required: true

      java-distribution:
        description: |
          Java distribution to use.
          Example: 'temurin', zulu, ...
          See 'https://github.com/actions/setup-java#supported-distributions'
          for complete list of supported distributions
        type: string
        required: false
        default: 'temurin'

      #
      # Build control
      #
      build-project:
        description: |
          Gradle project name to build: gradle :<project>:<command>
        type: string
        required: true

      build-docker:
        description: |
          Build and push docker image (gradle :<project>:dockerBuildImage) for each run
        type: boolean
        required: false
        default: false
      build-docker-releases:
        description: |
          Build and push docker image (gradle :<project>:dockerBuildImage) only for releases
        type: boolean
        required: false
        default: true
      build-tar:
        description: |
          Create .tar archive with all jars required for application
          and startup script (gradle :<project>:distTar
        type: boolean
        required: false
        default: true

      artifacts-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7

      build-project-dir:
        description: |
          Path to project root directory
          Defaults to repository root
        type: string
        required: false
        default: './'

      #
      # Release control
      #
      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

    secrets:
      GRADLE_PROPERTIES:
        description: |
          Create properties file with given contents before starting the build
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

jobs:
  detect-version:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - id: version-detector
        uses: milaboratory/github-ci/actions/detect-version@v1
        with:
          canonize: ${{ inputs.version-canonize }}
          fetch-depth: ${{ inputs.version-fetch-depth }}

    outputs:
      version: ${{ steps.version-detector.outputs.version }}
      tag: ${{ steps.version-detector.outputs.tag }}
      sha: ${{ steps.version-detector.outputs.sha }}

      prev-version: ${{ steps.version-detector.outputs.prev-version }}
      prev-tag: ${{ steps.version-detector.outputs.prev-tag }}
      prev-sha: ${{ steps.version-detector.outputs.prev-sha }}

  build:

    runs-on: ${{ ubuntu-latest }}

    needs:
      - detect-version

    steps:
      - uses: actions/checkout@v2

      - name: Prepare env for Java application build
        uses: actions/setup-java@v2
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}
          cache: 'gradle'

      - name: Set gradle.properties
        env:
          GRADLE_PROPS: ${{ secrets.GRADLE_PROPERTIES }}
        run: |
          printf "%s" "${GRADLE_PROPS}" >> ~/.gradle/gradle.properties

      - name: Read actual project properties
        id: gradle-props
        uses: milaboratory/github-ci/actions/java/gradle/dump-properties@v1
        with:
          project-dir: ${{ inputs.build-project }}
          project-name: ${{ inputs.build-project-name }}

      - name: Build dist tar
        if: inputs.build-tar
        run: |
          ./gradlew \
            --project-prop "version=${{ needs.detect-version.outputs.version }}" \
            :${{ inputs.build-project }}:distTar

      - name: Save artifact with dist tar
        if: inputs.build-tar
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.app-name-slug }}-tar
          path: ${{ steps.gradle-props.outputs.buildDir }}/distributions/*.tar
          retention-days: ${{ inputs.artifacts-retention }}

      - name: Build docker image
        if: |
          inputs.build-docker ||
            ( inputs.build-docker-releases
              && startsWith( needs.detect-version.outputs.tag, 'v') )
        run: |
          ./gradlew \
            --project-prop "version=${{ needs.detect-version.outputs.version }}" \
            :${{ inputs.build-project }}:dockerBuildImage

      - name: Generate push targets list
        id: push-targets
        if: |
          inputs.build-docker ||
            ( inputs.build-docker-releases
              && startsWith( needs.detect-version.outputs.tag, 'v') )

        uses: milaboratory/github-ci/actions/shell@v1
        env:
          BUILD_NAME: ${{ steps.gradle-props.outputs.name }}
          BUILD_VERSION: ${{ needs.detect-version.outputs.version }}
        with:
          run: |
            # Always push '<tag name>:<version>' 'as is'
            echo "${GITHUB_REPOSITORY}/${BUILD_NAME}:${BUILD_VERSION}"

      - name: Publish docker image to GitHub registry
        if: |
          inputs.build-docker ||
            ( inputs.build-docker-releases
              && startsWith( needs.detect-version.outputs.tag, 'v') )
        uses: milaboratory/github-ci/actions/docker/push-github@v1
        with:
          auth-token: ${{ secrets.GITHUB_TOKEN }}
          source: ${{ steps.gradle-props.outputs.name }}:${{ needs.detect-version.outputs.version }}
          targets: ${{ steps.push-targets.outputs.stdout }}

      #
      # Release-only steps
      #
      - name: Create release
        id: create-release
        if: startsWith( needs.detect-version.outputs.tag, 'v')
        uses: milaboratory/github-ci/actions/release/create@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ needs.detect-version.outputs.version }}
          tag: ${{ needs.detect-version.outputs.tag }}

          assets: |
            ${{ steps.gradle-props.outputs.buildDir }}/distributions/*.tar

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-url: ${{ steps.create-release.outputs.html_url }}

  notify-telegram:
    runs-on: ubuntu-latest

    if: inputs.notify-telegram

    needs:
      - detect-version
      - build

    steps:
      - name: Report dev build is ready
        if: needs.build.outputs.release-id == ''
        uses: milaboratory/github-ci/actions/notify/templates/dev-build-ready@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.app-name }}
          build-version: ${{ needs.detect-version.outputs.version }}
          build-category: dev

      - name: Report release is ready
        if: needs.build.outputs.release-id != ''
        uses: milaboratory/github-ci/actions/notify/templates/release-ready@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.app-name }}
          release-tag: ${{ needs.detect-version.outputs.tag }}
