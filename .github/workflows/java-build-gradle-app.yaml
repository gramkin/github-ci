# This workflow will prepare given version of Java and use it to build gradle application.
# All gradle dependencies will be cached for next runs.

name: Build Java Application

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Version detection control
      #
      version-fetch-depth:
        description: |
          Fetch at least N commits during version detection from tags
        type: string
        required: false
        default: 100
      version-canonize:
        description: |
          Canonize version number to make it always look like regular semver: <major>.<minor>.<bugfix>
        type: boolean
        required: false
        default: true

      #
      # Environment control
      #
      java-version:
        description: |
          Version of JAVA to use for build
        type: string
        required: true

      java-distribution:
        description: |
          Java distribution to use.
          Example: 'temurin', zulu, ...
          See 'https://github.com/actions/setup-java#supported-distributions'
          for complete list of supported distributions
        type: string
        required: false
        default: 'temurin'

      #
      # Build control
      #
      build-project:
        description: |
          Gradle project name to build: gradle :<project>:<command>
        type: string
        required: true
      build-project-dir:
        description: |
          Path to project root directory
          Defaults to repository root
        type: string
        required: false
        default: './'

      artifacts-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7

      #
      # Archive distribution control
      #
      dist-archive-tasks:
        description: |
          Tasks for archive distribution generation (.zip, .tar and so on)

        type: string
        required: false
        default: 'distTar'
      dist-archive-paths:
        description: |
          Distribution archives to save as build artifact and to upload to S3

        type: string
        required: false
        default: './distributions/*.tar'

      #
      # Release control
      #
      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      release-s3-region:
        description: |
          Upload application release artifact's files to
          AWS S3 bucket in given region.
        type: string
        required: false
        default: 'eu-central-1'
      release-s3-bucket:
        description: |
          Upload application release artifact's files to
          given AWS S3 bucket.
        required: false
        type: string
        default: ''
      release-s3-path:
        description: |
          Upload application release artifact's files to given 'path'
          in S3 bucket.

          Released application files would be uploaded to:
            's3://<s3-bucket>/<s3-path>/<file>'

        type: string
        required: false
        default: 'cdn/software/${{ github.repository.name }}'
      release-s3-add-version:
        description: |
          Add version number to all files uploaded to S3 bucket.
          Depending on extension presence in file name one of the following happens:
            - file with extension get version number before extension:
              'myfile.zip' becomes 'myfile-<version>.zip'.
            - files without extension get version number appended to the name:
              'myfile' becomes 'myfile-<version>'.

        type: boolean
        required: false
        default: true

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

    secrets:
      GRADLE_PROPERTIES:
        description: |
          Create properties file with given contents before starting the build
        required: false

      AWS_KEY_ID:
        description: |
          AWS Key ID for S3 to use when uloading tests report.
          Empty value disables report upload step.
        required: false
      AWS_KEY_SECRET:
        description: |
          AWS Key Secet for S3 to use when uploading tests report.
          Empty value disables report upload step.
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - uses: milaboratory/github-ci/actions/context/init@v1
        with:
          version-fetch-depth: ${{ inputs.version-fetch-depth }}
          version-canonize: ${{ inputs.version-canonize }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v1

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build
    runs-on: ubuntu-latest

    needs:
      - init

    steps:
      - uses: actions/checkout@v2
      - uses: milaboratory/github-ci/blocks/java/build@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: build
          exclude-tasks: test

          properties: |
            mi-ci-stage=build
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

  test:
    name: :test
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - uses: actions/checkout@v2
      - id: test
        uses: milaboratory/github-ci/blocks/java/test@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: test

          properties: |
            mi-ci-stage=test
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}
          upload-report: ${{ secrets.AWS_KEY_ID != '' && secrets.AWS_KEY_SECRET != '' }}

    outputs:
      status: ${{ job.status }}
      report-uploaded: ${{ steps.test.outputs.report-uploaded }}
      report-url: https://cdn.milaboratory.com/internal/ci/${{ steps.test.outputs.report-path }}index.html

  notify-test:
    name: notify test
    runs-on: ubuntu-latest

    if: always() && needs.test.outputs.status != ''
    needs:
      - test

      # Jobs below are added to control notifications order in Telegram
      - notify-build

    steps:
      - uses: milaboratory/github-ci/blocks/notify/tests@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.app-name }}
          tests-status: ${{ needs.test.outputs.status }}
          report-url: ${{ fromJSON(needs.test.outputs.report-uploaded) && needs.test.outputs.report-url || '' }}

  notify-release-review:
    name: notify review required
    runs-on: ubuntu-latest

    if: always() && needs.test.outputs.status != ''
    needs:
      - test

      # Jobs below are added to control notifications order in Telegram
      - notify-test
      - notify-build

    steps:
      - uses: milaboratory/github-ci/blocks/notify/review-required@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          message: new version of app is ready for release.
          product-name: ${{ inputs.app-name }}

  distArchive:
    name: archive
    runs-on: ubuntu-latest

    if: inputs.dist-archive-paths != '' && inputs.dist-archive-tasks != ''
    needs:
      - build

    steps:
      - uses: actions/checkout@v2
      - uses: milaboratory/github-ci/blocks/java/build@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.dist-archive-tasks }}
          exclude-tasks: test

          artifact-name: ${{ inputs.app-name-slug }}
          artifact-paths: ${{ inputs.dist-archive-paths }}
          artifact-retention: ${{ inputs.artifact-retention }}

          properties: |
            mi-ci-stage=dist
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

    outputs:
      status: ${{ job.status }}
      # Even 'constant' outputs become initialized only for started jobs.
      # All outputs of 'skipped' job will always be empty.
      started: 'true'

  distDocker:
    name: :dockerBuildImage
    runs-on: ubuntu-latest

    needs:
      - test

    steps:
      - uses: actions/checkout@v2
      - uses: milaboratory/github-ci/blocks/java/build@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: dockerBuildImage
          exclude-tasks: test

          properties: |
            mi-ci-stage=dist
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - uses: milaboratory/github-ci/blocks/java/publish/docker@v1
        id: docker-push
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      status: ${{ job.status }}
      docker-tags: ${{ steps.docker-push.outputs.pushed-json }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if: always() && inputs.notify-telegram

    needs:
      - distDocker

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: ${{ needs.distDocker.outputs.status }}
          product-name: ${{ inputs.app-name }}
          docker-images: ${{ needs.distDocker.outputs.docker-tags }}

  release:
    name: Release app
    runs-on: ubuntu-latest

    needs:
      - init
      - distArchive
      - distDocker

    if: (cancelled() || success()) && fromJSON(needs.init.outputs.is-release)
    environment: release

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v1

      - uses: actions/download-artifact@v2
        if: needs.distArchive.outputs.started == 'true'
        with:
          name: ${{ inputs.app-name-slug }}
          path: release-files

      - name: Create release
        uses: milaboratory/github-ci/actions/release/create@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ steps.context.outputs.current-version }}
          tag: ${{ steps.context.outputs.current-tag }}

          assets: |
            release-files/*

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

      - name: Upload to S3
        if: ${{ inputs.release-s3-bucket != '' && needs.distArchive.outputs.started == 'true' }}
        uses: milaboratory/github-ci/blocks/release/s3@v1
        with:
          artifact-name: ${{ inputs.app-name-slug }}
          add-version: ${{ inputs.release-s3-add-version }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}

          s3-region: ${{ inputs.release-s3-region }}
          s3-bucket: ${{ inputs.release-s3-bucket }}
          s3-path: ${{ inputs.release-s3-path }}

    outputs:
      status: ${{ job.status }}

  notify-release:
    name: notify release
    runs-on: ubuntu-latest

    if: always() && needs.release.outputs.status != ''
    needs:
      - release

    steps:
      - uses: milaboratory/github-ci/blocks/notify/release@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.app-name }}
