# This workflow will install given version of Golang and use it to build Platform.

name: Build Platform on MacOS
on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true
      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD
        type: boolean
        required: false
        default: false
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''
      #
      # Environment control
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'
      #
      # Golang settings
      #
      golang-version:
        description: |
          Version of Golang to use for build
        type: string
        required: true
      cache-version:
        description: |
          Simple hack, that allows to 'reset' cache for particular job.

          Just change the value of this parameter and the next run will
          not find build cache and will have to start from scratch.
        type: string
        required: false
        default: 'v1'
      #
      # Bootstrap control
      #
      bootstrap-ci-script-name:
        description: |
          Bootstrap CI script name (install go modules, C++ libraries, binary tools, etc)
        type: string
        required: true
        default: 'bootstrap-ci.sh'
      #
      # Build control
      #
      build-command:
        description: |
          Build command (initiate build for the platform)
        type: string
        required: false
        default: 'go build .'
      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true
      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'
    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false
      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false
      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false
      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false
jobs:
  init:
    name: init
    runs-on: ubuntu-latest
    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v4-beta
    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build-on-macos
    runs-on: macos-latest
    needs:
      - init
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: milaboratory/github-ci/actions/env@v4-beta
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v4-beta
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: milaboratory/github-ci/blocks/pl/macos/build@v4-beta
        with:
          golang-version: ${{ inputs.golang-version }}
          cache-version: ${{ inputs.cache-version }}
          bootstrap-ci-script-name: ${{ inputs.bootstrap-ci-script-name }}
          build-command: ${{ inputs.build-command }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  notify-build:
    name: notify build
    runs-on: ubuntu-latest

    if: always()
      && inputs.notify-telegram
      && inputs.notify-build != 'false'
      && needs.build.result != 'cancelled'

    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v4-beta
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: |
            ${{ needs.build.result }}
          product-name: ${{ inputs.app-name }}