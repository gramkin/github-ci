# This workflow will build and push docker image to the aws ecr.

name: Build Docker image (ecr)

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}

      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD

        type: boolean
        required: false
        default: false

      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment settings
      #
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with secrets.env
          This input's envs have lower priority compared than secrets.env
        type: string
        required: false
        default: '{}'

      #
      # AWS settings
      #
      aws-iam-role-to-assume:
        description: |
          The ARN of a IAM role to assume and configure the Actions environment with
          assumed role credentials.
        type: string
        required: true

      aws-region:
        description: |
          The AWS region
        type: string
        required: true
        default: 'eu-central-1'

      #
      # Docker multiarch settings
      #
      docker-qemu-setup:
        description: |
          Setup QEMU static binaries for
          building multi-architecture Docker images with Buildx.
        type: boolean
        required: false
        default: true

      docker-qemu-platforms:
        description: |
          Comma separted string of platforms
          to install (e.g. amd64,arm64,riscv64)
        type: string
        required: false
        default: 'all'

      #
      # Docker images settings
      #
      docker-images-build-config:
        description: |
          Provide docker images build configuration
          as JSON-encoded map. You can provide several images
          if you have additional containers for deployment.

          You need to pass flavor-suffix if you have
          additional container in the same repo
          and you want to push it into one registry but with a different tag.

           { "dockerfile": "./path/do/docker/file",
             "image": "docker_image_name",
             "flavor-suffix": "",
             "context": "." },
           { "dockerfile": "./path/do/additional/docker/file",
             "image": "docker_image_name",
             "flavor-suffix": "-migration",
             "context": "."}

        type: string
        required: false
        default: ''

      docker-images-build-args:
        description: |
          List of build args (ARG Dockerfile instruction)
          One line one argument.

          ARG_1=VALUE_OF_ARG_1
          ARG_2=VALUE_OF_ARG_2
        type: string
        required: false
        default: ''

      docker-platform:
        description: |
          --platform option for build.
          You can specify several platforms for
          the multi-architecture build.
          However, if you do so, first,
          you need to install qemu.
          (e.g. linux/amd64,linux/arm64)
        type: string
        required: false
        default: 'linux/amd64'

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

      notify-build:
        description: |
          Enable notifications about build status (build ready/failed)
          Possible values are:
           - 'true' - send all notifications about build status (both success and failed)
           - 'failure-only' - send notification about failed builds, don't notify on success
           - 'success-only' - send notification about success builds, don't notify on failures
           - 'false' - don't send notifications about build results at all.
        required: false
        type: string
        default: 'true'

    secrets:
      env:
        description: |
          custom environment variables to set for all jobs in workflow
          as JSON-encoded map:
            { "MY_VAR_1": "awesome value",
              "VARIABLE_2": "not so awesome :)" }

          This input's envs are merged with inputs.env
          This input's envs have HIGHER priority compared than inputs.env
        required: false

      DOCKER_BUILD_SECRETS:
        description: |
          List of build secrets. (RUN --mount=secret)
          One line one secret

          SECRET_1=VALUE_OF_SECRET_1
          SECRET_2=VALUE_OF_SECRET_2
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v3

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  setup-matrix:
    name: :setup-matrix
    runs-on: ubuntu-latest

    needs:
      - init

    steps:
      - id: setup-matrix-combinations
        uses: milaboratory/github-ci/actions/shell@v3
        env:
          MATRIX_PARAMS_COMBINATIONS: ${{ inputs.docker-images-build-config }}
        with:
          dump-stdout: false
          run: |
            ghwa_set_output "matrix-combinations" "{\"include\":[$MATRIX_PARAMS_COMBINATIONS]}"

    outputs:
      matrix-combinations: ${{ fromJSON(steps.setup-matrix-combinations.outputs.data).matrix-combinations }}

  build:
    name: :build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup-matrix.outputs.matrix-combinations) }}

    needs:
      - init
      - setup-matrix

    permissions:
      id-token: write
      contents: read

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v3

      - uses: milaboratory/github-ci/actions/env@v3
        with:
          inputs: ${{ inputs.env }}
          secrets: ${{ secrets.env }}

      - uses: actions/checkout@v3
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v3
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - uses: docker/setup-qemu-action@v2
        if: inputs.docker-qemu-setup
        with:
          platforms: ${{ inputs.docker-qemu-platforms }}

      - uses: docker/setup-buildx-action@v2

      - uses: aws-actions/configure-aws-credentials@v1
        if: github.event_name != 'pull_request'
        with:
          role-to-assume: ${{ inputs.aws-iam-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}

      - id: login-ecr
        if: github.event_name != 'pull_request'
        uses: aws-actions/amazon-ecr-login@v1

      - id: transform-version
        uses: milaboratory/github-ci/actions/shell@v3
        env:
          CURRENT_VERSION: ${{ steps.context.outputs.current-version }}
          CURRENT_SHA: ${{ steps.context.outputs.current-version-sha }}
          IS_RELEASE: ${{ steps.context.outputs.is-release }}
        with:
          dump-stdout: false
          run: |
            TRIMMED_SHA="${CURRENT_SHA:0:8}"
            TRIMMED_VERSION=$(echo "$CURRENT_VERSION" | grep -E -o "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)-?(0|[1-9]\d*)*")

            if [ "$IS_RELEASE" ];then
              ghwa_set_output transformed_version "${TRIMMED_VERSION}"
            else
              ghwa_set_output transformed_version "${TRIMMED_VERSION}-${TRIMMED_SHA}"
            fi

      - id: image-metadata
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ matrix.image }}
          flavor: |
            suffix=${{ matrix.flavor-suffix }}
          labels: |
            org.opencontainers.image.vendor=MiLaboratories
          tags: |
            type=raw,value=${{ fromJSON( steps.transform-version.outputs.data ).transformed_version }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - id: build-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: ${{ inputs.docker-platform }}
          build-args: |
              ${{ inputs.docker-images-build-args }}
          secrets: |
              ${{ secrets.DOCKER_BUILD_SECRETS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outputs.labels }}

      - id: notify-build
        if: always()
          && inputs.notify-telegram
          && inputs.notify-build != 'false'
          && steps.build-push.conclusion != 'cancelled'
        uses: milaboratory/github-ci/blocks/notify/build@v3
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: |
            ${{ steps.build-push.conclusion }}
          product-name: ${{ inputs.app-name }}
          docker-images: ${{ fromJSON(steps.image-metadata.outputs.json).tags }}

    outputs:
      docker-metadata-json: ${{ steps.image-metadata.outputs.json }}