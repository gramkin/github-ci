# This workflow will do a clean install of node dependencies,
# cache/restore them, build the source code and run tests across different OS

name: Build Electron Application

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node version to use'
        default: '14.x'
        required: false
        type: string
      os:
        description: 'OS to build for'
        required: true
        type: string
      app-name-slug:
        description: 'Application name slug (affects release file name)'
        required: true
        type: string

jobs:
  build:

    runs-on: ${{ inputs.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ inputs.node-version }} on ${{ inputs.os }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Cache electron libs
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/electron/
            ~/Library/Caches/electron/

          key: ${{ runner.OS }}-cache-v1-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-cache-v1-electron-

      - name: Cache local node_modules
        uses: actions/cache@v2
        with:
          path: node_modules

          key: ${{ runner.OS }}-cache-v1-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-cache-v1-node_modules-

      - run: npm install

      - run: npm run electron:build
      #    - run: npm run test:unit

      - name: Save artifact with app for Mac OS X
        uses: actions/upload-artifact@v2
        if: runner.os == 'macOS'
        with:
          name: ${{ inputs.app-name-slug }}-mac
          path: dist_electron/*.dmg

      - name: Save artifact with app for Linux
        uses: actions/upload-artifact@v2
        if: runner.os == 'Linux'
        with:
          name: ${{ inputs.app-name-slug }}-linux
          path: dist_electron/*.AppImage
