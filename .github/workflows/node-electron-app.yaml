# This workflow will do a clean prepare of node dependencies,
# cache/restore them, build the source code and run tests across different OS

name: Build Electron Application

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      app-name:
        description: |
          Application name in human-readable form.
          As it is supposed to be shown in texts
        type: string
        required: false
        default: ${{ github.repository }}
      app-name-slug:
        description: |
          Application name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      git-crypt-unlock:
        description: |
          Perform `git ctypt unlock` after each fresh repository checkout

          NOTE: don't forget to set the following secrets:
                  - GIT_CRYPT_GPG_KEY
                  - GIT_CRYPT_KEY_PASSWORD

        type: boolean
        required: false
        default: false

      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Environment control
      #
      node-version:
        description: |
          Node version to use
        type: string
        required: true
      os:
        description: |
          OS to build for.
          Examples: ubuntu-latest, macos-latest, windows-latest

          Check labels of GitHub-hosted runners for more info:
          https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#github-hosted-runners
        type: string
        required: true

      #
      # Build control
      #
      artifacts-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7
      build-script-name:
        description: |
          Name of script for application build
        type: string
        required: false
        default: 'electron:build'
      vue-project:
        description: |
          This is vue-based project. Use 'vue-cli' toolkit
        type: boolean
        required: false
        default: true

      #
      # Release control
      #
      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

    secrets:
      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

      GIT_CRYPT_GPG_KEY:
        description: |
          base64-encoded GPG key pair
          (see actions/git/crypt inputs description)
        required: false

      GIT_CRYPT_KEY_PASSWORD:
        description: |
          Password for GPG key
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v2

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    strategy:
      matrix:
        os: ${{ fromJSON( inputs.os ) }}

    name: Build application
    runs-on: ${{ matrix.os }}

    needs:
      - init

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/actions/git/crypt@v2
        if: inputs.git-crypt-unlock
        with:
          gpg-key: ${{ secrets.GIT_CRYPT_GPG_KEY }}
          gpg-key-password: ${{ secrets.GIT_CRYPT_KEY_PASSWORD }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v2

      - name: Prepare env for Node application build
        uses: milaboratory/github-ci/actions/node/prepare@v2
        with:
          node-version: ${{ inputs.node-version }}
          cache-version: 'v1'

      - name: Install node packages with npm
        run: npm install
        shell: bash

      - name: Patch package version
        uses: milaboratory/github-ci/actions/node/patch-version@v2
        with:
          version: ${{ steps.context.outputs.current-version }}

      - name: Build application
        env:
          BUILD_SCRIPT: ${{ inputs.build-script-name }}
        run: |
          npm run "${BUILD_SCRIPT}"

      - id: artifact
        uses: milaboratory/github-ci/actions/shell@v2
        env:
          APP_NAME_SLUG: ${{ inputs.app-name-slug }}
        with:
          dump-stdout: false
          run: |
            if [ "${RUNNER_OS}" = "Linux" ]; then
              ghwa_set_output "name" "${APP_NAME_SLUG}-linux"
              ghwa_set_output "path" "dist_electron/*.AppImage"

            elif [ "${RUNNER_OS}" = "macOS" ]; then
              ghwa_set_output "name" "${APP_NAME_SLUG}-mac"
              ghwa_set_output "path" "dist_electron/*.dmg"

            else
              ghwa_set_output "name" ""
              ghwa_set_output "path" ""

            fi

      - name: Save artifact with application
        uses: actions/upload-artifact@v2
        if: fromJSON( steps.artifact.outputs.data ).name != ''
        with:
          name: ${{ fromJSON( steps.artifact.outputs.data ).name }}
          path: ${{ fromJSON( steps.artifact.outputs.data ).path }}
          retention-days: ${{ inputs.artifacts-retention }}

      - name: Upload app to release artifact
        uses: actions/upload-artifact@v2
        if: fromJSON( steps.artifact.outputs.data ).name != ''
        with:
          name: release-files
          path: ${{ fromJSON( steps.artifact.outputs.data ).path }}
          retention-days: ${{ inputs.artifacts-retention }}

  merge-status:
    name: merge build statuses
    runs-on: ubuntu-latest

    needs:
      - build

    # This hacky job gets 'success' status only when all build jobs succeed
    # If any of jobs in 'build' matrix fails, <merge-status> gets canceled and
    # has '' (empty string) in <status> output
    steps:
      - shell: bash
        run: 'true'

    outputs:
      status: ${{ job.status }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if: always() && inputs.notify-telegram

    needs:
      - merge-status

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v2
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: ${{ needs.merge-status.outputs.status != '' && needs.merge-status.outputs.status || 'failure' }}
          product-name: ${{ inputs.app-name }}

  release:
    name: Create release

    runs-on: ubuntu-latest
    needs:
      - init
      - build

    if: fromJSON(needs.init.outputs.is-release)
    environment: release

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v2

      - uses: actions/download-artifact@v2
        with:
          name: release-files
          path: release-files

      - name: Create release
        id: release
        uses: milaboratory/github-ci/actions/release/create@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ steps.context.outputs.current-version }}
          tag: ${{ steps.context.outputs.current-version-tag }}

          assets: release-files/*

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

    outputs:
      release-id: ${{ steps.release.outputs.id }}
      release-url: ${{ steps.release.outputs.html_url }}
