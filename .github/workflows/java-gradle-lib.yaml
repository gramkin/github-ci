# This workflow will prepare given version of Java and use it to build gradle application.
# All gradle dependencies will be cached for next runs.

name: Build Java Application

on:
  workflow_call:
    inputs:
      #
      # Common settings
      #
      lib-name:
        description: |
          Library name in human-readable form.
          As it is supposed to be shown in messages
        type: string
        required: false
        default: ${{ github.repository }}
      lib-name-slug:
        description: |
          Library name slug (part of release file name)
        type: string
        required: true

      #
      # Checkout settings
      #
      checkout-submodules:
        description: |
          'Submodules' mode for 'actions/checkout' action
          '', 'false' - disable submodules support
          'true' - checkout submodules
          'recursive' - checkout submodules recursive
        type: string
        required: false
        default: ''

      #
      # Version detection control
      #
      version-fetch-depth:
        description: |
          Fetch at least N commits during version detection from tags
        type: string
        required: false
        default: 100
      version-canonize:
        description: |
          Canonize version number to make it always look like regular semver: <major>.<minor>.<bugfix>
        type: boolean
        required: false
        default: true

      #
      # Environment control
      #
      java-version:
        description: |
          Version of JAVA to use for build
        type: string
        required: true

      java-distribution:
        description: |
          Java distribution to use.
          Example: 'temurin', zulu, ...
          See 'https://github.com/actions/setup-java#supported-distributions'
          for complete list of supported distributions
        type: string
        required: false
        default: 'temurin'

      #
      # Build control
      #
      build-project:
        description: |
          Gradle project name to build:
            gradle :<project>:<command>

          All tasks in
        type: string
        required: true

      build-tasks:
        description: |
          Gradle build tasks.
          You can put several tasks here (one per line)

          NOTE: for 'publish*' tasks use 'publish-*-tasks' inputs.

        type: string
        required: false
        default: build

      artifact-paths:
        description: |
          List of paths to artifacts to save after build run.
          Empty list disables artifacts storage.

          Relative paths are relative to gradle 'buildDir' project's property.
          Absolute paths (starting with '/') are relative to repository root.
          Patterns ('*', '**', etc.) are supported.

        type: string
        required: false
        default: ''

      artifact-retention:
        description: |
          Time in days to keep build artifacts before removing them
        type: number
        required: false
        default: 7

      build-project-dir:
        description: |
          Path to project root directory
          Defaults to repository root
        type: string
        required: false
        default: './'

      #
      # Release control
      #
      release-files:
        description: |
          Files to include in releases.

          Relative paths are relative to gradle 'buildDir' project's property.
          Absolute paths (starting with '/') are relative to repository root.
          Patterns ('*', '**', etc.) are supported.

        type: string
        required: false
        default: libs/*.jar

      changelog-exclude-types:
        description: |
          Comma-separated list of change types to skip during
          changelog generation for release.

          See 'Conventional Commits' spec for more info:
          https://www.conventionalcommits.org/en/v1.0.0/

          Default: 'doc,chore'
        type: string
        required: false
        default: doc,chore

      #
      # Publication control
      #
      publish-dev-tasks:
        description: |
          Newline-separated list of tasks to run on library publication step.
        type: string
        required: false
        default: publish

      publish-release-tasks:
        description: |
          Newline-separated list of tasks to run on library publication step.
        type: string
        required: false
        default: ''

      #
      # Notifications
      #
      notify-telegram:
        description: |
          Enable Telegram notifications
        required: false
        type: boolean
        default: true

    secrets:
      GRADLE_PROPERTIES:
        description: |
          Create properties file with given contents before starting the build
        required: false

      AWS_KEY_ID:
        description: |
          AWS Key ID for S3 to use when uloading tests report.
          Empty value disables report upload step.
        required: false
      AWS_KEY_SECRET:
        description: |
          AWS Key Secet for S3 to use when uploading tests report.
          Empty value disables report upload step.
        required: false

      TELEGRAM_NOTIFICATION_TARGET:
        description: |
          ID of Telegram Channel or User to notify on build results.
        required: false
      TELEGRAM_API_TOKEN:
        description: |
          Telegram Bot API authorization token
        required: false

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest

    steps:
      - uses: milaboratory/github-ci/actions/context/init@v1
        with:
          version-fetch-depth: ${{ inputs.version-fetch-depth }}
          version-canonize: ${{ inputs.version-canonize }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v1

    outputs:
      is-release: ${{ steps.context.outputs.is-release }}

  build:
    name: :build
    runs-on: ubuntu-latest

    needs:
      - init

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v1

      - uses: milaboratory/github-ci/blocks/java/build@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.build-tasks }}
          exclude-tasks: test

          artifact-name: ${{ inputs.lib-name-slug }}
          artifact-paths: ${{ inputs.artifact-paths }}
          artifact-retention: ${{ inputs.artifact-retention }}

          properties: |
            mi-ci-stage=build
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - id: props
        uses: milaboratory/github-ci/actions/java/gradle/properties/read@v1
        with:
          project-dir: ${{ inputs.build-project-dir }}
          project-name: ${{ inputs.build-project }}

      - id: release-files
        name: Render release files paths
        if: inputs.release-files != ''
        uses: milaboratory/github-ci/actions/strings/convert-paths@v1
        with:
          rel-root: ${{ steps.props.outputs.buildDir }}/
          abs-root: .
          paths: ${{ inputs.release-files }}

      - uses: actions/upload-artifact@v2
        name: Save release files
        if: inputs.release-files != ''
        with:
          name: 'release-files'
          path: ${{ steps.release-files.outputs.result }}
          retention-days: ${{ inputs.artifact-retention }}

    outputs:
      status: ${{ job.status }}

  notify-build:
    name: Notify build
    runs-on: ubuntu-latest

    if: always() && inputs.notify-telegram

    needs:
      - build

    steps:
      - uses: milaboratory/github-ci/blocks/notify/build@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          build-status: ${{ needs.build.outputs.status }}
          product-name: ${{ inputs.lib-name }}

  test:
    name: :test
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: test
        uses: milaboratory/github-ci/blocks/java/test@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}

          properties: |
            mi-ci-stage=test
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

          s3-key-id: ${{ secrets.AWS_KEY_ID }}
          s3-key-secret: ${{ secrets.AWS_KEY_SECRET }}
          upload-report: ${{ secrets.AWS_KEY_ID != '' && secrets.AWS_KEY_SECRET != '' }}

    outputs:
      status: ${{ job.status }}
      report-uploaded: ${{ steps.test.outputs.report-uploaded }}
      report-url: https://cdn.milaboratory.com/internal/ci/${{ steps.test.outputs.report-path }}index.html

  notify-test:
    name: notify test
    runs-on: ubuntu-latest

    if: always() && needs.test.outputs.status != ''
    needs:
      - test

    steps:
      - uses: milaboratory/github-ci/blocks/notify/tests@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.lib-name }}
          tests-status: ${{ needs.test.outputs.status }}
          report-url: ${{ fromJSON(needs.test.outputs.report-uploaded) && needs.test.outputs.report-url || '' }}

  publish-dev:
    name: :publish-dev
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - id: context
        uses: milaboratory/github-ci/actions/context@v1

      - uses: milaboratory/github-ci/blocks/java/build@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.publish-dev-tasks }}
          exclude-tasks: test

          properties: |
            mi-ci-stage=publish
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - id: props
        uses: milaboratory/github-ci/actions/java/gradle/properties/read@v1
        with:
          project-dir: ${{ inputs.build-project-dir }}
          project-name: ${{ inputs.build-project }}

      - name: Prepare JSON list of published libraries
        id: libs-list
        uses: milaboratory/github-ci/actions/strings/json-list@v1
        with:
          input: |-
            ${{ steps.props.outputs.group}}.${{ steps.props.outputs.name }}:${{ steps.context.outputs.current-version }}

    outputs:
      status: ${{ job.status }}
      libs-list: ${{ steps.libs-list.outputs.result }}

  notify-publish-dev:
    name: notify publish dev
    runs-on: ubuntu-latest

    if: always() && needs.publish-dev.outputs.status != ''
    needs:
      - publish-dev

    steps:
      - uses: milaboratory/github-ci/blocks/notify/publish@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: ${{ needs.publish-dev.outputs.status }}

          product-name: ${{ inputs.lib-name }}
          product-type: library

          repository-type: maven
          repository-category: dev
          packages: ${{ needs.publish-dev.outputs.libs-list }}

  release:
    name: Release lib
    runs-on: ubuntu-latest

    needs:
      - build

    if: fromJSON(needs.init.outputs.is-release)
    environment: release

    steps:
      - id: context
        uses: milaboratory/github-ci/actions/context@v1

      - uses: actions/download-artifact@v2
        with:
          name: 'release-files'
          path: 'release-files'

      - name: Create release
        uses: milaboratory/github-ci/actions/release/create@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

          name: ${{ steps.context.outputs.current-version }}
          tag: ${{ steps.context.outputs.current-tag }}

          assets: 'release-files/*'

          changelog-exclude-types: ${{ inputs.changelog-exclude-types }}

    outputs:
      status: ${{ job.status }}

  notify-release:
    name: notify publish dev
    runs-on: ubuntu-latest

    if: always() && needs.release.outputs.status != ''
    needs:
      - release

    steps:
      - uses: milaboratory/github-ci/blocks/notify/release@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          product-name: ${{ inputs.lib-name }}

  publish-release:
    name: :publish-release
    runs-on: ubuntu-latest

    needs:
      - release

    if: fromJSON(needs.init.outputs.is-release) && inputs.publish-release-tasks != ''
    environment: release

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: ${{ inputs.checkout-submodules }}

      - uses: milaboratory/github-ci/blocks/java/build@v1
        with:
          project: ${{ inputs.build-project }}
          project-dir: ${{ inputs.build-project-dir }}
          tasks: ${{ inputs.publish-release-tasks }}
          exclude-tasks: test

          properties: |
            mi-ci-stage=publish
            ${{ secrets.GRADLE_PROPERTIES }}
          java-version: ${{ inputs.java-version }}
          java-distribution: ${{ inputs.java-distribution }}

      - id: props
        uses: milaboratory/github-ci/actions/java/gradle/properties/read@v1
        with:
          project-dir: ${{ inputs.build-project-dir }}
          project-name: ${{ inputs.build-project }}

      - name: Prepare JSON list of published libraries
        id: libs-list
        uses: milaboratory/github-ci/actions/strings/json-list@v1
        with:
          input: |-
            ${{ steps.props.outputs.group}}.${{ steps.props.outputs.name }}:${{ steps.context.outputs.current-version }}

    outputs:
      status: ${{ job.status }}
      libs-list: ${{ steps.libs-list.outputs.result }}

  notify-publish-release:
    name: notify publish dev
    runs-on: ubuntu-latest

    if: always() && needs.publish-release.outputs.status != ''
    needs:
      - publish-release

    steps:
      - uses: milaboratory/github-ci/blocks/notify/publish@v1
        with:
          telegram-target: ${{ secrets.TELEGRAM_NOTIFICATION_TARGET }}
          telegram-token: ${{ secrets.TELEGRAM_API_TOKEN }}

          job-status: ${{ needs.publish-release.outputs.status }}

          product-name: ${{ inputs.lib-name }}
          product-type: library

          repository-type: maven
          repository-category: release
          packages: ${{ needs.publish-release.outputs.libs-list }}
