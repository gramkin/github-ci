import * as exec from "@actions/exec";
export declare function git(...args: string[]): Promise<exec.ExecOutput>;
interface fetchOptions {
    remote?: string;
    refSpec?: string;
    depth?: number;
    deepen?: number;
}
export declare function fetch(opts?: fetchOptions): Promise<void>;
interface revListOptions {
    maxCount?: number;
    ref?: string;
}
export declare function revList(opts?: revListOptions): Promise<string[]>;
interface describeOptions {
    ref?: string;
    abbrev?: number;
    exactMatch?: boolean;
    tags?: boolean;
}
export declare function describe(opts?: describeOptions): Promise<string>;
/**
 * Resolve any textual reference into commit SHA.
 * Commit SHA as <ref> is resolved to itself.
 */
export declare function resolveRef(ref?: string): Promise<string>;
/**
 * Fetch all tags from remote repository without their history (only single commit)
 * and without breaking local history of already fetched refs
 */
export declare function fetchTags(remote?: string): Promise<void>;
/**
 * Ensure git repository has history of at least <minCommits> size from <ref>.
 * If not, fetch at most <minCommits> of <ref> from <remote>.
 */
export declare function ensureHistorySize(minCommits: number, remote?: string, ref?: string): Promise<void>;
export {};
