"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureHistorySize = exports.previousTag = exports.latestTag = exports.latestVersionTag = exports.currentTag = exports.listCommitTags = exports.fetchTags = exports.resolveRef = exports.tag = exports.lsRemote = exports.describe = exports.revList = exports.fetch = exports.git = void 0;
const exec = __importStar(require("@actions/exec"));
function git(...args) {
    return __awaiter(this, void 0, void 0, function* () {
        const execResult = yield exec.getExecOutput("git", args, {
            ignoreReturnCode: true,
        });
        if (execResult.exitCode !== 0) {
            const cmd = `git '${args.join("' '")}'`;
            const exitCode = execResult.exitCode.toString();
            const stderr = execResult.stderr;
            throw Error(`command "${cmd}" failed with code '${exitCode}':\n\n${stderr}`);
        }
        return execResult;
    });
}
exports.git = git;
function fetch(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ["fetch"];
        if (opts && opts.forceFlag)
            cmd.push("--force");
        if (opts && opts.depth != null)
            cmd.push(`--depth=${opts.depth}`);
        if (opts && opts.deepen != null)
            cmd.push(`--deepen=${opts.deepen}`);
        if (opts && opts.remote)
            cmd.push(opts.remote);
        if (opts && opts.refSpec)
            cmd.push(opts.refSpec);
        yield git(...cmd);
    });
}
exports.fetch = fetch;
function revList(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ["rev-list"];
        if (opts && opts.maxCount != null)
            cmd.push(`--max-count=${opts.maxCount}`);
        if (opts && opts.ref)
            cmd.push(opts.ref);
        const revListResult = yield git(...cmd);
        const revListStr = revListResult.stdout.trim();
        if (revListStr === "") {
            return [];
        }
        return revListStr.split("\n");
    });
}
exports.revList = revList;
function describe(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ["describe"];
        if (opts && opts.tags)
            cmd.push("--tags");
        if (opts && opts.abbrev != null)
            cmd.push(`--abbrev=${opts.abbrev}`);
        if (opts && opts.exactMatch)
            cmd.push("--exact-match");
        if (opts && opts.ref)
            cmd.push(opts.ref);
        const describeResult = yield git(...cmd);
        const versionString = describeResult.stdout;
        return versionString.trim();
    });
}
exports.describe = describe;
function lsRemote(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ["ls-remote"];
        if (opts.tagsFlag)
            cmd.push("--tags");
        if (opts.headsFlag)
            cmd.push("--heads");
        if (opts.refs)
            cmd.push("--refs");
        if (opts.quietFlag)
            cmd.push("--quiet");
        cmd.push(opts.repository);
        if (opts.refs)
            cmd.push(...opts.refs);
        const lsRemoteResult = yield git(...cmd);
        const result = [];
        for (const line of lsRemoteResult.stdout.trim().split("\n")) {
            const parts = line.split("\t");
            result.push({ objectSHA: parts[0], refName: parts[1] });
        }
        return result;
    });
}
exports.lsRemote = lsRemote;
function tag(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = ["tag"];
        if (opts && opts.list)
            cmd.push("--list");
        if (opts && opts.pointsAt)
            cmd.push(`--points-at=${opts.pointsAt}`);
        if (opts && opts.merged)
            cmd.push(`--merged=${opts.merged}`);
        if (opts && opts.sort)
            cmd.push(`--sort=${opts.sort}`);
        if (opts && opts.ref)
            cmd.push(opts.ref);
        const tagResult = yield git(...cmd);
        return tagResult.stdout.trim();
    });
}
exports.tag = tag;
/*
 * Complex git action helpers.
 * Here are functions that simplify common actions
 * The usually either 'aliases' that wrap git command with predefined arguments
 * or bunch of actions not covered by single git command.
 */
/**
 * Resolve any textual reference into commit SHA.
 * Commit SHA as <ref> is resolved to itself.
 */
function resolveRef(ref = "HEAD") {
    return __awaiter(this, void 0, void 0, function* () {
        const shaList = yield revList({ maxCount: 1, ref });
        return shaList[0];
    });
}
exports.resolveRef = resolveRef;
/**
 * Fetch all tags from remote repository without their history (only single commit)
 * and without breaking local history of already fetched refs
 */
function fetchTags(remote = "origin") {
    return __awaiter(this, void 0, void 0, function* () {
        yield fetch({
            remote,
            refSpec: "refs/tags/*:refs/tags/*",
            deepen: 1,
        });
    });
}
exports.fetchTags = fetchTags;
/**
 * Get all tags that point exactly to given commit (HEAD by default)
 */
function listCommitTags(ref = "HEAD") {
    return __awaiter(this, void 0, void 0, function* () {
        const tagsListStr = yield tag({
            pointsAt: ref,
        });
        if (!tagsListStr) {
            return [];
        }
        return tagsListStr.split("\n");
    });
}
exports.listCommitTags = listCommitTags;
/**
 * Get tag that points exactly to given commit
 * NOTE: when several tags point to given commit, the freshest (by tag's date)
 *       is returned. This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 */
function currentTag(ref = "HEAD") {
    return __awaiter(this, void 0, void 0, function* () {
        return yield describe({
            tags: true,
            abbrev: 0,
            exactMatch: true,
            ref,
        });
    });
}
exports.currentTag = currentTag;
/**
 * Get the latest version tag in repository
 *   - if at least one tag with 'v' prefix exists in repository,
 *     then only 'v'-prefixed tags are be treated
 *   - tags are sorted as version numbers,
 *     see 'man git-tag' -> '/version:refname'
 *
 * This usually gives the latest application release version.
 */
function latestVersionTag() {
    return __awaiter(this, void 0, void 0, function* () {
        const tagsListStr = yield tag({
            list: true,
            sort: "version:refname",
        });
        const tagsList = tagsListStr.split("\n");
        let vPrefixFound = false;
        let latestVersion = "";
        for (const v of tagsList) {
            if (v.startsWith("v")) {
                // Save only v-prefixed tags if we face at least one
                vPrefixFound = true;
                latestVersion = v;
            }
            else if (!vPrefixFound) {
                // Update latest version number until we found at least one with 'v'-prefix.
                latestVersion = v;
            }
        }
        return latestVersion;
    });
}
exports.latestVersionTag = latestVersionTag;
/**
 * Get first tag reachable from given commit.
 * It is either tag that points directly to commit, or to any of its parents (closest parent).
 *
 * NOTE: when several tags point to single commit, the freshest (by tag's date) is returned.
 *       This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 * @param ref
 */
function latestTag(ref = "HEAD") {
    return __awaiter(this, void 0, void 0, function* () {
        return yield describe({
            tags: true,
            abbrev: 0,
            ref,
        });
    });
}
exports.latestTag = latestTag;
/**
 * Get first tag reachable from given commit's PARENT.
 * This is useful when you try to detect changes between two versions of code.
 * E.g.:
 *  const curTag = currentTag('HEAD')
 *  const prevTag = previousTag('HEAD')
 *  const versionChanges = log({ref: `${prevTag}..${curTag}`})
 *
 * NOTE: when several tags point to single commit, the freshest (by tag's date)
 *       is returned. This behavior is defined by git itself.
 *       See 'man git-describe' for more info.
 * @param ref
 */
function previousTag(ref = "HEAD") {
    return __awaiter(this, void 0, void 0, function* () {
        return yield latestTag(`${ref}^`);
    });
}
exports.previousTag = previousTag;
/**
 * Ensure git repository has history of at least <minCommits> size from <ref>.
 * If not, fetch at most <minCommits> of <ref> from <remote>.
 */
function ensureHistorySize(minCommits, remote = "origin", ref = "HEAD") {
    return __awaiter(this, void 0, void 0, function* () {
        const commits = yield revList({
            maxCount: minCommits,
            ref,
        });
        if (commits.length >= minCommits) {
            return;
        }
        yield fetch({
            deepen: minCommits,
            remote,
            refSpec: ref,
        });
    });
}
exports.ensureHistorySize = ensureHistorySize;
